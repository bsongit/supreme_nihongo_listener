import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, Alert } from 'react-native';
import * as TaskManager from 'expo-task-manager';
import * as BackgroundFetch from 'expo-background-fetch';
import * as SecureStore from 'expo-secure-store';
import Constants from 'expo-constants';

const BACKGROUND_FETCH_TASK = 'background-fetch-task';

// Define the background task
TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  try {
    console.log('ok');
    // Retrieve the current count from storage
    let count = await SecureStore.getItemAsync('backgroundFetchCount');
    count = count ? parseInt(count) : 0;

    // Increment the count
    count += 1;

    // Save the updated count back to storage
    await SecureStore.setItemAsync('backgroundFetchCount', count.toString());

    // Indicate successful background fetch
    return BackgroundFetch.Result.NewData;
  } catch (err) {
    console.log(err);
    return BackgroundFetch.Result.Failed;
  }
});

// Function to register the background task
async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
    minimumInterval: 10, // 1 minute
    stopOnTerminate: false,   // android only,
    startOnBoot: true         // android only
  });
}

// Function to unregister the background task
async function unregisterBackgroundFetchAsync() {
  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);
}

export default function AnswerModeScreen() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    if (Constants.isDevice) {
      registerBackgroundFetchAsync()
        .then(() => console.log('Background fetch registered'))
        .catch(err => console.log('Error registering background fetch', err));
    } else {
      console.log('Must use physical device for background fetch');
    }

    // Load the current count from storage when the app loads
    SecureStore.getItemAsync('backgroundFetchCount').then(value => {
      setCount(value ? parseInt(value) : 0);
    });

    return () => {
      unregisterBackgroundFetchAsync();
    };
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Background Fetch Example</Text>
      <Text style={styles.text}>Count: {count}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  text: {
    fontSize: 24
  }
});